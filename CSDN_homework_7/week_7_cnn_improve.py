# -*- coding: utf-8 -*-
"""Week_7_CNN_improve3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1moW_K-NPOMrwij6JJgpApZTif_p8J3Ky
"""

"""A very simple MNIST classifier.
See extensive documentation at
https://www.tensorflow.org/get_started/mnist/beginners
"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import argparse
import sys
import tensorflow as tf

from tensorflow.examples.tutorials.mnist import input_data



from keras.layers.core import Dense, Flatten,Dropout
from keras.layers.convolutional import Conv2D
from keras.layers.pooling import MaxPooling2D
from keras.layers.normalization import BatchNormalization

from keras import backend as K


K.image_data_format()

# Import data
data_dir = '/tmp/tensorflow/mnist/input_data'
mnist = input_data.read_data_sets(data_dir, one_hot=True)
# Define loss and optimizer
x = tf.placeholder(tf.float32, [None, 784])
y_ = tf.placeholder(tf.float32, [None, 10])
learning_rate = tf.placeholder(tf.float32)

with tf.name_scope('reshape'):
  x_image = tf.reshape(x, [-1, 28, 28, 1])


net = Conv2D(32, kernel_size=[3,3], strides=[1,1],activation='relu',
                 padding='same',
                input_shape=[28,28,1],
                kernel_initializer='TruncatedNormal', bias_initializer='zeros')(x_image)
net = BatchNormalization(axis=-1)(net)

net = Conv2D(32, kernel_size=[3,3], strides=[1,1],activation='relu',
                padding='same')(net)
net = MaxPooling2D(pool_size=[2,2])(net)
net = BatchNormalization(axis=-1)(net)

net = Conv2D(64, kernel_size=[3,3], strides=[1,1],activation='relu',
                padding='same')(net)
net = MaxPooling2D(pool_size=[2,2])(net)
net = BatchNormalization(axis=-1)(net)

net = Conv2D(64, kernel_size=[3,3], strides=[1,1],activation='relu',
                padding='same')(net)
net = MaxPooling2D(pool_size=[2,2])(net)
net = BatchNormalization(axis=-1)(net)


net = Flatten()(net)
net = Dense(512, activation='relu')(net)
net = Dropout(0.2)(net)
net = Dense(10,activation='softmax')(net)

from keras.objectives import categorical_crossentropy
cross_entropy = tf.reduce_mean(categorical_crossentropy(y_, net))

l2_loss = tf.add_n( [tf.nn.l2_loss(w) for w in tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)] )
total_loss = cross_entropy + 1e-3*l2_loss

train_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(total_loss)

sess = tf.Session()

K.set_session(sess)

init_op = tf.global_variables_initializer()
sess.run(init_op)
# Train
for step in range(2000):
  batch_xs, batch_ys = mnist.train.next_batch(100)
  lr = 0.01
  _, loss, l2_loss_value, total_loss_value = sess.run(
               [train_step, cross_entropy, l2_loss, total_loss], 
               feed_dict={x: batch_xs, y_: batch_ys, learning_rate:lr})
  
  if (step+1) % 100 == 0:
    print('step %d, entropy loss: %f, l2_loss: %f, total loss: %f' % 
            (step+1, loss, l2_loss_value, total_loss_value))
    # Test trained model
    correct_prediction = tf.equal(tf.argmax(net, 1), tf.argmax(y_, 1))
    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
    print(sess.run(accuracy, feed_dict={x: batch_xs, y_: batch_ys}))

print(sess.run(accuracy, feed_dict={x: mnist.test.images,
                                    y_: mnist.test.labels}))

"""正则化因：采用正则正则因子0.01。

dropout:0.8

初始化参数：初始化参数服从normal distribution

学习率调整: 开始设置是1e-4，但是梯度下降速度太慢，于是换成了1e-3。

卷积kernel size和数量调整：
CONV2D -> RELU -> BatchNorm-> 
CONV2D -> RELU -> MAXPOOL -> BatchNorm->
CONV2D -> RELU -> MAXPOOL -> BatchNorm->
CONV2D -> RELU -> MAXPOOL -> BatchNorm->
FLATTEN -> FULLYCONNECTED
"""

